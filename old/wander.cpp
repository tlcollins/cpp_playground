#include <ncurses.h>
#include <vector>

using namespace std;

char map[75][75] =
{
{'#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#','#','#',' ','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#'},
{' ',' ','#',' ','#',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ','#',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#','#','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ','#',' ','#','#','#','#','#','#',' ',' ',' ','#',' ','#',' ','#',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#','#','#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#',' ','#','#','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{'#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}};

bool can_move(int x, int y) {
  int testch = mvinch(x, y);
  return (testch == ' ');
}

class Bullet {
  public:
  int x, y, direction;
  bool alive = true;
  
  Bullet(int startx, int starty, int startdirection) {
    x = startx;
    y = starty;
    direction = startdirection;
  } // end of - constructor
  
  void move() {
    switch (direction){
      case 'u': if (can_move(x-1, y)) x--; else alive = false; break;
      case 'd': if (can_move(x+1, y)) x++; else alive = false; break;
      case 'l': if (can_move(x, y-1)) y--; else alive = false; break;
      case 'r': if (can_move(x, y+1)) y++; else alive = false; break;
    }
  }
  
  void render() {
    mvprintw(x, y, "%c", 'B');
  } // end of - void render()
}; // end of class - Bullet

class Player {
  public:
  int x, y;
  int facing;
  
  Player(int startx, int starty) {
    x = startx;
    y = starty;
  } // end of - constructor
  
  void move(int direction) {
    facing = direction;
    switch (direction){
      case 'u': if (can_move(x-1, y)) x--; break;
      case 'd': if (can_move(x+1, y)) x++; break;
      case 'l': if (can_move(x, y-1)) y--; break;
      case 'r': if (can_move(x, y+1)) y++; break;
    }
  } // end of - void move()
  
  void shoot(vector<Bullet>& localbullets) {
    localbullets.emplace_back(x, y, facing);
  } // end of - void shoot()
  
  void render() {
    mvprintw(x, y, "%c", '@');
  } // end of - void render()
}; // end of class - Player

void drawmap() {
  for (int x=0; x<75; x++) {
    for (int y=0; y<75; y++) {
      if (map[x][y] != ' ') {
        attron(COLOR_PAIR(3));
        mvprintw(x, y+31, "%c", map[x][y]);
        attroff(COLOR_PAIR(3));
      }
    }
  }
}

void removebullets(vector<Bullet>& localbullets) {
  int i = 0;
  do {
    if (localbullets[i].alive == false) {
      localbullets.erase(localbullets.begin() + i);
    } else {
      i++;
    }
  } while (i != localbullets.size());
} // end of - void removenotalive()

int main() {
  initscr();
  halfdelay(1);
  //nodelay(stdscr, TRUE);
  noecho();
  int cyclecount = 0;
  
  vector<Bullet> playerbullets;
  
  start_color();
  init_pair(0, COLOR_WHITE , COLOR_BLACK );
  init_pair(1, COLOR_GREEN , COLOR_BLACK );
  init_pair(2, COLOR_RED   , COLOR_BLACK );
  init_pair(3, COLOR_BLACK , COLOR_BLUE  );

  int ch;
  
  keypad(stdscr, TRUE);
  
  Player p1(3,33);
  
  do {
    cyclecount++;
    switch (ch) {
      case 'w': p1.move('u'); break;
      case 's': p1.move('d'); break;
      case 'a': p1.move('l'); break;
      case 'd': p1.move('r'); break;
      case 'j': p1.shoot(playerbullets); break;
    }
    
    clear();
    
    
    drawmap();

    if (playerbullets.size() > 0) {
      for (auto& it : playerbullets) {
        it.move();
        it.render();
      }
    }
    
    if (playerbullets.size() > 0) removebullets(playerbullets);

    
    p1.render();

    //debug pane
    mvprintw(0,0, "x:%d y:%d ch:%d", p1.x, p1.y, ch);
    mvprintw(1,0, "cycles:%d", cyclecount);
    mvprintw(2,0, "LINES:%d COLS:%d", LINES-1, COLS-1);
    for (int i=0; i<LINES; i++) mvprintw(i,30,"|");
    mvprintw(LINES-1, COLS-1, " ");
    //end debug pane
   
    refresh();
    
    
    ch = getch();
        
  } while (ch != 'p'); // end of - main loop
  
  endwin();
  
  return 0;
} // end of - int main()